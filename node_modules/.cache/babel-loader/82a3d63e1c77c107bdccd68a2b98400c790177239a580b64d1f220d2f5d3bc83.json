{"ast":null,"code":"export class WebSocketService {\n  constructor(url = 'ws://localhost:8080', onMessage, onStatusChange) {\n    this.url = url;\n    this.onMessage = onMessage;\n    this.onStatusChange = onStatusChange;\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.onMessageCallback = null;\n    this.onStatusChangeCallback = null;\n    if (onMessage) this.onMessageCallback = onMessage;\n    if (onStatusChange) this.onStatusChangeCallback = onStatusChange;\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n        this.ws.onopen = () => {\n          var _this$onStatusChangeC;\n          this.reconnectAttempts = 0;\n          (_this$onStatusChangeC = this.onStatusChangeCallback) === null || _this$onStatusChangeC === void 0 ? void 0 : _this$onStatusChangeC.call(this, 'connected');\n          resolve();\n        };\n        this.ws.onmessage = event => {\n          try {\n            var _this$onMessageCallba;\n            const message = JSON.parse(event.data);\n            (_this$onMessageCallba = this.onMessageCallback) === null || _this$onMessageCallba === void 0 ? void 0 : _this$onMessageCallba.call(this, message);\n          } catch (error) {\n            console.error('Failed to parse WebSocket message:', error);\n          }\n        };\n        this.ws.onclose = () => {\n          var _this$onStatusChangeC2;\n          (_this$onStatusChangeC2 = this.onStatusChangeCallback) === null || _this$onStatusChangeC2 === void 0 ? void 0 : _this$onStatusChangeC2.call(this, 'disconnected');\n          this.attemptReconnect();\n        };\n        this.ws.onerror = error => {\n          var _this$onStatusChangeC3;\n          (_this$onStatusChangeC3 = this.onStatusChangeCallback) === null || _this$onStatusChangeC3 === void 0 ? void 0 : _this$onStatusChangeC3.call(this, 'error');\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      var _this$onStatusChangeC4;\n      this.reconnectAttempts++;\n      (_this$onStatusChangeC4 = this.onStatusChangeCallback) === null || _this$onStatusChangeC4 === void 0 ? void 0 : _this$onStatusChangeC4.call(this, 'connecting');\n      setTimeout(() => {\n        this.connect().catch(() => {\n          this.attemptReconnect();\n        });\n      }, this.reconnectDelay * this.reconnectAttempts);\n    }\n  }\n  send(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  isConnected() {\n    var _this$ws;\n    return ((_this$ws = this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.readyState) === WebSocket.OPEN;\n  }\n}","map":{"version":3,"names":["WebSocketService","constructor","url","onMessage","onStatusChange","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","onMessageCallback","onStatusChangeCallback","connect","Promise","resolve","reject","WebSocket","onopen","_this$onStatusChangeC","call","onmessage","event","_this$onMessageCallba","message","JSON","parse","data","error","console","onclose","_this$onStatusChangeC2","attemptReconnect","onerror","_this$onStatusChangeC3","_this$onStatusChangeC4","setTimeout","catch","send","readyState","OPEN","stringify","disconnect","close","isConnected","_this$ws"],"sources":["/Users/sahidalam/Developer/Cohort_3.0/WebDev/Class/Week16-Websockets/websocket-2-chatApp-FE/chatApp_fe/src/utils/websocket.ts"],"sourcesContent":["import { WebSocketMessage, JoinMessage, ChatSendMessage } from '../types/chat';\n\nexport class WebSocketService {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private onMessageCallback: ((message: WebSocketMessage) => void) | null = null;\n  private onStatusChangeCallback: ((status: string) => void) | null = null;\n\n  constructor(\n    private url: string = 'ws://localhost:8080',\n    private onMessage?: (message: WebSocketMessage) => void,\n    private onStatusChange?: (status: string) => void\n  ) {\n    if (onMessage) this.onMessageCallback = onMessage;\n    if (onStatusChange) this.onStatusChangeCallback = onStatusChange;\n  }\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n        \n        this.ws.onopen = () => {\n          this.reconnectAttempts = 0;\n          this.onStatusChangeCallback?.('connected');\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            this.onMessageCallback?.(message);\n          } catch (error) {\n            console.error('Failed to parse WebSocket message:', error);\n          }\n        };\n\n        this.ws.onclose = () => {\n          this.onStatusChangeCallback?.('disconnected');\n          this.attemptReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n          this.onStatusChangeCallback?.('error');\n          reject(error);\n        };\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      this.onStatusChangeCallback?.('connecting');\n      \n      setTimeout(() => {\n        this.connect().catch(() => {\n          this.attemptReconnect();\n        });\n      }, this.reconnectDelay * this.reconnectAttempts);\n    }\n  }\n\n  send(message: JoinMessage | ChatSendMessage): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}